{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundry.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","CardList","robots","CardComponent","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAkBeA,EAhBF,SAACC,GACb,OAEC,yBAAKC,UAAU,wDAEd,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAAMI,GAAhC,mBACpB,6BACC,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,UCiBCC,EAxBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACZC,EAAgBD,EAAOE,KAAI,SAACC,EAAKC,GAKtC,OAAQ,kBAAC,EAAD,CACNC,IAAKD,EACLR,GAAII,EAAOI,GAAGR,GACdC,KAAMG,EAAOI,GAAGP,KAChBC,MAAOE,EAAOI,GAAGN,WAKpB,OACC,6BACEG,ICJWK,EAbE,SAAC,GAAiC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC/B,OACE,6BACC,2BAAOf,UAAU,mCAChBgB,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCEAI,G,MATA,SAACpB,GACf,OACC,yBAAKqB,MAAO,CAACC,UAAW,SAAUC,OAAO,kBAAmBC,OAAQ,UAClExB,EAAMyB,YCiBKC,E,YAnBd,WAAY1B,GAAQ,IAAD,8BAClB,4CAAMA,KACD2B,MAAQ,CACZC,UAAU,GAHO,E,+EAODC,EAAOC,GACxBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAKzB,OAAIG,KAAKJ,MAAMC,SACP,yDAEDG,KAAK/B,MAAMyB,a,GAjBOQ,aCuEZC,E,YA7Dd,aAAe,IAAD,8BACb,+CAoBDC,eAAiB,SAACC,GAEjB,EAAKJ,SAAS,CAACjB,YAAaqB,EAAMC,OAAOC,SArBzC,EAAKX,MAAQ,CACZnB,OAAQ,GACRO,YAAa,IAJD,E,iFASO,IAAD,OACnBwB,MAAM,8CACJC,MAAK,SAAAC,GACL,OAAOA,EAASC,UAEhBF,MAAK,SAAAG,GACL,EAAKX,SAAS,CAACxB,OAAQmC,S,+BAchB,IAAD,EACsBZ,KAAKJ,MAA5BnB,EADC,EACDA,OAAQO,EADP,EACOA,YAET6B,EAAiBpC,EAAOqC,QAAO,SAAAC,GACpC,OAAOA,EAAMzC,KAAK0C,cAAcC,SAASjC,EAAYgC,kBAGtD,OAAKvC,EAAOyC,OAIV,yBAAKhD,UAAU,MACd,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWe,aAAce,KAAKI,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU3B,OAAQoC,OARf,2C,GAtCQX,aCCEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCPNC,IAASC,OACP,kBAAC,EAAD,MAICC,SAASC,eAAe,SDiHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.63d49d17.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n\treturn (\r\n\r\n\t\t<div className=' tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\r\n\t\t\t<img alt='Robot' src={`https://robohash.org/${props.id}?size=200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{props.name}</h2>\r\n\t\t\t\t<p>{props.email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\r\n\t);\r\n\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\tconst CardComponent = robots.map((user,i) => {\r\n\r\n\t\tif(!true){\r\n\t\t\tthrow new Error('error, error');\r\n\t\t}\r\n\t\treturn (<Card \r\n\t\t\t\tkey={i} \r\n\t\t\t\tid={robots[i].id} \r\n\t\t\t\tname={robots[i].name} \r\n\t\t\t\temail={robots[i].email}/> \r\n\t\t\t\t)\r\n\t});\r\n\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{CardComponent}\r\n\t\t</div>\r\n\r\n\t\t);\r\n\r\n\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst SearchBox =({searchfield, searchChange }) => {\r\n\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<input className='pa3 ba b--green bg-lightest-blue' \r\n\t\t\t\t\ttype='search' \r\n\t\t\t\t\tplaceholder='search robots'  \r\n\t\t\t\t\tonChange={searchChange}\r\n\t\t\t\t/>\r\n\r\n\t\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', border:'1px solid black', height: '500px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\r\n\t\t);\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info){\r\n\t\tthis.setState({hasError: true})\r\n\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.hasError){\r\n\t\t\treturn <h1>Ooooops, That is not good</h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\nexport default ErrorBoundry;","import React, {Component} from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\n//import {robots} from '../robots';\r\nimport './App.css';\r\nimport Scroll from '../Components/Scroll';\r\nimport ErrorBoundry from '../Components/ErrorBoundry';\r\n\r\n\r\n\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then(response=>{\r\n\t\t\t\treturn response.json();\r\n\t\t\t})\r\n\t\t\t.then(users=>{\r\n\t\t\t\tthis.setState({robots: users});\r\n\t\t\t})\r\n\r\n\t\t\r\n\t}\r\n\r\n\tonSearchChange = (event) => {\r\n\t\t\r\n\t\tthis.setState({searchfield: event.target.value})\r\n\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst {robots, searchfield} = this.state;\r\n\r\n\t\tconst filteredRobots = robots.filter(robot =>{\r\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t})\r\n\r\n\t\tif (!robots.length){\r\n\t\t\treturn <h1>Loading</h1>\r\n\t\t} else {\r\n\t\t\t\treturn (\r\n\t\t\t\t<div className='tc' >\r\n\t\t\t\t\t<h1 className='f1'>Robofriends</h1>\r\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t\t\t\t</ErrorBoundry>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\r\n\t\t);\r\n\r\n\t\t}\r\n\t\t\r\n \r\n\t}\r\n\r\n\r\n\t\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\n//import Card from './Card';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n//import {robots} from './robots';\n\nReactDOM.render(\n\t\t<App />\n\t\t\n\n\n\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}